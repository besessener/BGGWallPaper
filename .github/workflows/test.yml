# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Run tests
      - name: gradle test
        run: ./gradlew clean jacocoTestReport

      # Reporting
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "Unit Tests"
          files: |
            ./build/test-results/**/*.xml
      - name: Install ReportGenerator
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
      - name: Convert JaCoCo to Cobertura
        run: |
          reportgenerator \
            -reports:./build/reports/jacoco/test/jacocoTestReport.xml \
            -targetdir:coverage-report \
            -reporttypes:Cobertura
      - name: Generate Coverage Report Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage-report/Cobertura.xml
          badge: true
          fail_below_min: true
          hide_complexity: true
          format: markdown
          output: both
          thresholds: "60 80"
      - name: Append Coverage Report to GitHub Summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
      - name: Post Coverage Comment to PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: code-coverage-results.md
          token: ${{ secrets.GITHUB_TOKEN }}

      # start docker
      - name: start docker
        run: |
          echo "1" | ./run.sh &
          timeout=240
          interval=5
          elapsed=0

          while [ "$elapsed" -lt "$timeout" ]; do
            img_count=$(curl -X GET "http://localhost:8080/collection?username=besessener&size=85&showName=no&showUrl=no&shuffle=yes" | grep -o "<img[^>]*>" | wc -l)

            if [ "$img_count" -gt 10 ]; then
              echo "There are more than 10 images ($img_count images)."
              exit 0
            fi

            sleep $interval
            elapsed=$((elapsed + interval))
          done

          echo "Timeout reached, condition not met."
          exit 1
